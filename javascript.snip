# Prototype
snippet proto
	$<1:class_name>.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};

# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}

# Object Method
snippet :f
	/**
	 * $1
	 * ${5}
	 */
	${1:method_name} : function(${2:attribute}) {
		${4}
	}${3:,}

# Anonymous Function
snippet f
	function(${1}) {${2}};

# if
snippet if
	if (${1:true}) {${2}};

# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}};

# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}

# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}

# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}

# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};

# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};

# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}

# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});

# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};

# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}

# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}

##########
#Extjs 4
##########
snippet extprop
	// {{{ ${1:prop}

	$1 : ''${2:,}

	// }}}

snippet extapp
	// {{{ namespace

	Ext.ns('${1:AppName}');

	// }}}
	// {{{ Ext.Loader

	Ext.Loader.setConfig({
		enabled: true,
		paths: {
			'Ext': '${2:./ext/src}',
			'$1': './src',
		}
	});

	// }}}
	// {{{ Ext.application

	Ext.application({

		// {{{ name

		name: '$1',

		// }}}
		// {{{ appFolder

		appFolder: '${3:src/app}',

		// }}}
		// {{{ autoCreateViewport

		autoCreateViewport: true,

		// }}}
		// {{{ controllers

		controllers: [
			'Main'
		],

		// }}}
		// {{{ launch

		launch: function() {

		}

		// }}}

	});

	// }}}

snippet extviewport
	// {{{ ${1:app}.view.Viewport

	Ext.define('$1.view.Viewport', {

		// {{{ requires

		requires: [
		],

		// }}}
		// {{{ extend

		extend: 'Ext.container.Viewport',

		// }}}
		// {{{ layout

		layout: {
			type: 'border',
			padding: 5
		},

		// }}}
		// {{{ items

		items: [{

			region: 'north'

		},{

			region: 'west'

		},{

			region: 'center'

		},{

			region: 'east'

		},{

			region: 'east'

		},{

			region: 'south'

		}]

		// }}}

	});

	// }}}

snippet extpanel
	// {{{ '${1:app}.view.${2:Panel}',
	/**
	 * @class $1.view.$2
	 * ${3:desctription}
	 */
	Ext.define('$1.view.$2', {
		// {{{ extend

		extend : '${3:Ext.Panel}',

		// }}}
		// {{{ alias

		alias : 'widget.${4:panel}',

		// }}}
		// {{{ requires

		requires : [
		],

		// }}}
		// {{{ ui

		//ui : 'styleclass',

		// }}}
		// {{{ title

		title : '${5:title}',

		// }}}
		// {{{ store

		store: '${6:Store}',

		// }}}
		// {{{ items

		items : [{
			html : 'item'
		}]

		// }}}
	});
	// }}}

snippet extgrid
	// {{{ '${1:app}.view.${2:GridPanel}',
	/**
	 * @class $1.view.$2
	 * ${3:desctription}
	 */
	Ext.define('$1.view.$2', {
		// {{{ extend

		extend : '${3:Ext.grid.Panel}',

		// }}}
		// {{{ alias

		alias : 'widget.${4:gridpanel}',

		// }}}
		// {{{ requires

		requires : [
		],

		// }}}
		// {{{ ui

		//ui : 'styleclass',

		// }}}
		// {{{ title

		title : '${5:title}',

		// }}}
		// {{{ store ページング時はinitComponentで生成

		store: '${6:Store}',

		// }}}

		// {{{ items

		columns: [{
			id: 'id',
			header: 'headertext',
			dataIndex: 'dbfieldname',
			width: 100,
			renderer: function(val){
				return '<div class="hogemoge">'+ val +'</div>';
			}
		}]

		// }}}
		// {{{ pageSize

		pageSize: 25,

		// }}}
		// {{{ initComponent

		initComponent : function(){

			var me = this;

			//同一store指定
			me.store = Ext.create('ns.store.Store');
			me.dockedItems = [{
				xtype: 'pagingtoolbar',
				store: me.store,
				dock: 'bottom',
				displayInfo: true
			}];

			me.callParent(arguments);

		}

		// }}}
/
	});
	// }}}

snippet extcontainer
	// {{{ '${1:app}.view.${2:Container}',
	/**
	 * @class $1.view.$2
	 * ${3:desctription}
	 */
	Ext.define('$1.view.$2', {
		// {{{ extend

		extend : '${4:Ext.Container}',

		// }}}
		// {{{ alias

		alias : 'widget.${5:Area}',

		// }}}
		// {{{ requires

		requires : [
		],

		// }}}
		// {{{ ui

		//ui : 'styleclass',

		// }}}
		// {{{ items

		items : [{
			html : 'item'
		}]

		// }}}
	});
	// }}}

snippet extmodel
	// {{{ '${1:app}.model.${2:Model}',
	/**
	 * @class $1.model.$2
	 * ${3:desctription}
	 */
	Ext.define('$1.model.$2', {
		// {{{ extend

		extend : '${4:Ext.data.Model}',

		// }}}
		// {{{ fields

		fields: [
			{name: 'hoge1', type: 'auto'/*, defaultValue: '', convert: function(){}*/},
			{name: 'hoge2', type: 'auto'/*, defaultValue: '', convert: function(){}*/},
		]

		// }}}

	});
	// }}}

snippet extarraystore
	// {{{ '${1:app}.store.${2:Store}',
	/**
	 * @class $1.store.$2
	 * ${3:desctription}
	 */
	Ext.define('$1.store.$2', {
		// {{{ extend

		extend : '${4:Ext.data.ArrayStore}',

		// }}}
		// {{{ model

		model : '${5:model}',

		// }}}
		// {{{ data

		data : [
			['hoge','fuga']
		]

		// }}}
	});
	// }}}

snippet extdirectstore
	// {{{ '${1:app}.store.${2:Store}',
	/**
	 * @class $1.store.$2
	 * ${3:desctription}
	 */
	Ext.define('$1.store.$2', {

		// {{{ extend

		extend : '${4:Ext.data.DirectStore}',

		// }}}
		// {{{ model

		model : '${5:model}',

		// }}}
		// {{{ autoLoad

		autoLoad: true,//{start: 0, limit: 25},

		// }}}
		// {{{ root

		root : '${6:data}',

		// }}}
		// {{{ totalProperty レコード総件数取得プロパティ

		totalProperty: '${7:total}',

		// }}}
		// {{{ proxy

		proxy: {
			type: 'direct',
			api:{
				create  : ns.moduleclass.insertData,
				read    : ns.moduleclass.selectData,
				update  : ns.moduleclass.updatedata,
				destroy : ns.moduleclass.deleteData
			},
			reader: {
				type: 'json',
				root: 'data',
				successProperty: 'success'
			}
		}

		// }}}

	});
	// }}}

snippet extcontroller
	// {{{ '${1:app}.controller.${2:Controller}',
	/**
	 * @class $1.store.$2
	 * ${3:desctription}
	 */
	Ext.define('$1.controller.$2', {
		// {{{ extend

		extend : '${4:Ext.app.Controller}',

		// }}}
		// {{{ refs インスタンス化されたViewへの参照提供 get([R]efname)

		refs: [{
			selector: '${6:componentquery}',ref: '${5:refname}'
		}],

		// }}}
		// {{{ views クラスへの参照提供 get(Xxxx)View

		views:[
			'Views'
		],

		// }}}
		// {{{ models クラスへの参照提供 get(Xxxx)Model

		models:[
			'Models'
		],

		// }}}
		// {{{ stores インスタンスへの参照提供 get(Xxxx)Store

		stores: [
			'Store'
		],

		// }}}
		// {{{ controllers インスタンスへの参照提供 get(Xxxx)Controller

		controllers: [
			'Controller'
		],

		// }}}
		// {{{ init

		//アプリケーション起動時にコールされる特別なメソッド
		//ApplicationのLaunch前にコールされる
		init: function() {

			var me = this;
			me.control({

				//コンポーネントクエリでのハンドラ設定
				'${7:xtype} ${8:xtype}[${9:action=XXXX}]': {

					click: function(){
						this.getXXXX().fireEvent('event');
					}

				}

			});

		},

		// }}}
		// {{{ onXXXX

		onXXXX: function() {
			console.log('hoge');
		}

		// }}}
	});
	// }}}

snippet extclass
	// {{{ '${1:classname}',
	/**
	 * @class $1
	 * ${2:}
	 */
	Ext.define('$1', {

		// {{{ extend

		extend : '${3:Ext.Base}',

		// }}}
		// {{{ alias

		alias : '${4:hogehoge}',

		// }}}
		// {{{ requires

		requires : [
		],

		// }}}
		// {{{ config(prefonfigure setting)

		config : {
			XXXX : '';
		},

		// }}}
		// {{{ constructor

		constructor : function(config){
			ver me = this;
			this.initConfig(config);
		},

		// }}}
		// {{{ applyXXXX

		applyXXXX : function(val){
			return val;
		},

		// }}}
		// {{{ statics

		statics : {
		},

		// }}}
		// {{{ init

		init : function(){
		},

		// }}}

	}, function(){
		var me = this;
		me.init();
	});

	// }}}

snippet initComponent
	// {{{ initComponent

	initComponent : function(){

		var me = this;

		me.callParent(arguments);

	}

	// }}}


snippet xtextbutton
abbr Ext.button.Button
	xtype: 'button'

snippet xtextbuttongroup
abbr Ext.container.ButtonGroup
	xtype: 'buttongroup'

snippet xtextcolorpalette
abbr Ext.picker.Color
	xtype: 'colorpalette'

snippet xtextcomponent
abbr Ext.Component
	xtype: 'component'

snippet xtextcontainer
abbr Ext.container.Container
	xtype: 'container'

snippet xtextcycle
abbr Ext.button.Cycle
	xtype: 'cycle'

snippet xtextdataview
abbr Ext.view.View
	xtype: 'dataview'

snippet xtextdatepicker
abbr Ext.picker.Date
	xtype: 'datepicker'

snippet xtexteditor
abbr Ext.Editor
	xtype: 'editor'

snippet xtexteditorgrid
abbr Ext.grid.plugin.Editing
	xtype: 'editorgrid'

snippet xtextgrid
abbr Ext.grid.Panel
	xtype: 'grid'

snippet xtextmultislider
abbr Ext.slider.Multi
	xtype: 'multislider'

snippet xtextpanel
abbr Ext.panel.Panel
	xtype: 'panel'

snippet xtextprogress
abbr Ext.ProgressBar
	xtype: 'progress'

snippet xtextslider
abbr Ext.slider.Single
	xtype: 'slider'

snippet xtextspacer
abbr Ext.toolbar.Spacer
	xtype: 'spacer'

snippet xtextsplitbutton
abbr Ext.button.Split
	xtype: 'splitbutton'

snippet xtexttabpanel
abbr Ext.tab.Panel
	xtype: 'tabpanel'

snippet xtexttreepanel
abbr Ext.tree.Panel
	xtype: 'treepanel'

snippet xtextviewport
abbr Ext.container.Viewport
	xtype: 'viewport'

snippet xtextwindow
abbr Ext.window.Window
	xtype: 'window'

# Toolbar component
snippet xtt_paging
abbr Ext.toolbar.Paging
	paging

snippet xtt_toolbar
abbr Ext.toolbar.Toolbar
	toolbar

snippet xtt_tbfill
abbr Ext.toolbar.Fill
	tbfill

snippet xtt_tbitem
abbr Ext.toolbar.Item
	tbitem

snippet xtt_tbseparator
abbr Ext.toolbar.Separator
	tbseparator

snippet xtt_tbspacer
abbr Ext.toolbar.Spacer
	tbspacer

snippet xtt_tbtext
abbr Ext.toolbar.TextItem
	tbtext

# Menu components
snippet xtmmenu
abbr Ext.menu.Menu
	menu

snippet xtmmenucheckitem
abbr Ext.menu.CheckItem
	menucheckitem

snippet xtmmenuitem
abbr Ext.menu.Item
	menuitem

snippet xtmmenuseparator
abbr Ext.menu.Separator
	menuseparator

snippet xtmmenutextitem
abbr Ext.menu.Item
	menutextitem

# Form components
snippet xtfform
abbr Ext.form.Panel
	form

snippet xtfcheckbox
abbr Ext.form.field.Checkbox
	checkbox

snippet xtfcombo
abbr Ext.form.field.ComboBox
	combo

snippet xtfdatefield
abbr Ext.form.field.Date
	datefield

snippet xtfdisplayfield
abbr Ext.form.field.Display
	displayfield

snippet xtffield
abbr Ext.form.field.Base
	field

snippet xtffieldset
abbr Ext.form.FieldSet
	fieldset

snippet xtfhidden
abbr Ext.form.field.Hidden
	hidden

snippet xtfhtmleditor
abbr Ext.form.field.HtmlEditor
	htmleditor

snippet xtflabel
abbr Ext.form.Label
	label

snippet xtfnumberfield
abbr Ext.form.field.Number
	numberfield

snippet xtfradio
abbr Ext.form.field.Radio
	radio

snippet xtfradiogroup
abbr Ext.form.RadioGroup
	radiogroup

snippet xtftextarea
abbr Ext.form.field.TextArea
	textarea

snippet xtftextfield
abbr Ext.form.field.Text
	textfield

snippet xtftimefield
abbr Ext.form.field.Time
	timefield

snippet xtftrigger
abbr Ext.form.field.Trigger
	trigger

# Chart components
snippet xtchartchart
abbr Ext.chart.Chart
	chart

snippet xtchartbarchart
abbr Ext.chart.series.Bar
	barchart

snippet xtchartcolumnchart
abbr Ext.chart.series.Column
	columnchart

snippet xtchartlinechart
abbr Ext.chart.series.Line
	linechart

snippet xtchartpiechart
abbr Ext.chart.series.Pie
	piechart


